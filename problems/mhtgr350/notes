Things to look into: Neutronics
-------------------------------
- I am not sure the eigenvalue calculations are correct

Things to look into: Thermo-hydraulics
--------------------------------------
- Add DGkernel for diffusion to TH-subC.i
- See if the DG kernels work for the steady state case

Things to look into: Thermo-mechanics
-------------------------------------
- Stresses caused by temp gradients:
	* need to solve temp in coolant
	* see if I can solve steady state for the coolant
	* see if I can use a correlation for h
		* Can I solve transient problem now?
- Stresses caused by irradiation
	* need to add kernels that take into account fluence effects
	* take fluence map as input
	* integrate nuetron flux from diffusion
		* flux constant over t, then fluence = flux * t 
		* flux changes as the cross sections change over time

How to define ICs (square function)
-----------------------------------
[Functions]
  [./ic_u]
    type = PiecewiseConstant
    axis = x
    direction = right
    xy_data = '0.1 0.0
               0.6 1.0
               1.0 0.0'
  [../]
[]

[Variables]
  [./u]
    order = FIRST
    family = MONOMIAL
  [../]
[]

[ICs]
  [./u_ic]
    type = FunctionIC
    variable = u
    function = ic_u
  [../]
[]

or

[Variables]
  [./u]
    family = FIRST
    order = CONSTANT
    [./InitialCondition]
      type = FunctionIC
      function = 'ic_u'
    [../]
  [../]
[]

How to generate 1D mesh using libmesh:
--------------------------------------
[Mesh]
  type = GeneratedMesh
  dim = 1
  nx = 100
  xmin = 0
  xmax = 1
[]

How to define periodic BCs:
---------------------------
[BCs]
  [./Periodic]
    #Note: Enable either "auto" or both "manual" conditions for this example
    active = 'manual_x manual_y'

    # Can use auto_direction with Generated Meshes
    [./auto]
      variable = u
      auto_direction = 'x y'
    [../]

     # Use Translation vectors for everything else
     [./manual_x]
       variable = u
       primary = 'left'
       secondary = 'right'
       translation = '40 0 0'
     [../]

     [./manual_y]
       variable = u
       primary = 'bottom'
       secondary = 'top'
       translation = '0 40 0'
     [../]
  [../]
[]

How to make side sets from nodal sets (points in gmsh):
-------------------------------------------------------
(This version is deprecated and will be removed)
[MeshModifiers]
  [./add_side_sets]
    type = SideSetsFromPoints
    points = '0    0  0
              0  793  0'
    new_boundary = 'fuel_bot fuel_top'
  [../]
[]

How to make side sets from nodal sets (points in gmsh):
-------------------------------------------------------
(This is the best way to do it)
[Mesh]
  [mymesh]
    type = FileMeshGenerator
    file = '1D-fuel-reflecA.msh'
  [../]

  [./add_side_sets]
    type = SideSetsFromPointsGenerator
    input = mymesh
    points = '0    0  0
              0  1073  0'
    new_boundary = 'ref_bot ref_top'
  [../]
[../]

How to export to the csv the values of a variable over a line:
--------------------------------------------------------------
[VectorPostprocessors]
  [./tocsv]
    type = LineValueSampler
    variable = 'group1 group2'
    start_point = '0 0 0'
    end_point = '0 1073 0'
    sort_by = y
    num_points = 100
    execute_on = timestep_end
  [../]
[]

[Outputs]
  perf_graph = true
  print_linear_residuals = true
  file_base = '1D-fuel-reflec-eig1'
  execute_on = timestep_end
  exodus = true
  csv = true
[]